// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HISTORY_CALCULATOR_SCHEMA_H_
#define FLATBUFFERS_GENERATED_HISTORY_CALCULATOR_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

#include "calculator_generated.h"

namespace calculator {
namespace schema {

struct History;
struct HistoryBuilder;
struct HistoryT;

struct HistoryT : public flatbuffers::NativeTable {
  typedef History TableType;
  std::vector<std::unique_ptr<calculator::schema::CalculatorDataT>> list{};
};

struct History FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HistoryT NativeTableType;
  typedef HistoryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<calculator::schema::CalculatorData>> *list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<calculator::schema::CalculatorData>> *>(VT_LIST);
  }
  flatbuffers::Vector<flatbuffers::Offset<calculator::schema::CalculatorData>> *mutable_list() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<calculator::schema::CalculatorData>> *>(VT_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.VerifyVector(list()) &&
           verifier.VerifyVectorOfTables(list()) &&
           verifier.EndTable();
  }
  HistoryT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HistoryT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<History> Pack(flatbuffers::FlatBufferBuilder &_fbb, const HistoryT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HistoryBuilder {
  typedef History Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<calculator::schema::CalculatorData>>> list) {
    fbb_.AddOffset(History::VT_LIST, list);
  }
  explicit HistoryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<History> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<History>(end);
    return o;
  }
};

inline flatbuffers::Offset<History> CreateHistory(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<calculator::schema::CalculatorData>>> list = 0) {
  HistoryBuilder builder_(_fbb);
  builder_.add_list(list);
  return builder_.Finish();
}

inline flatbuffers::Offset<History> CreateHistoryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<calculator::schema::CalculatorData>> *list = nullptr) {
  auto list__ = list ? _fbb.CreateVector<flatbuffers::Offset<calculator::schema::CalculatorData>>(*list) : 0;
  return calculator::schema::CreateHistory(
      _fbb,
      list__);
}

flatbuffers::Offset<History> CreateHistory(flatbuffers::FlatBufferBuilder &_fbb, const HistoryT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline HistoryT *History::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HistoryT>(new HistoryT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void History::UnPackTo(HistoryT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = list(); if (_e) { _o->list.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->list[_i] = std::unique_ptr<calculator::schema::CalculatorDataT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<History> History::Pack(flatbuffers::FlatBufferBuilder &_fbb, const HistoryT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHistory(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<History> CreateHistory(flatbuffers::FlatBufferBuilder &_fbb, const HistoryT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const HistoryT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _list = _o->list.size() ? _fbb.CreateVector<flatbuffers::Offset<calculator::schema::CalculatorData>> (_o->list.size(), [](size_t i, _VectorArgs *__va) { return CreateCalculatorData(*__va->__fbb, __va->__o->list[i].get(), __va->__rehasher); }, &_va ) : 0;
  return calculator::schema::CreateHistory(
      _fbb,
      _list);
}

inline const calculator::schema::History *GetHistory(const void *buf) {
  return flatbuffers::GetRoot<calculator::schema::History>(buf);
}

inline const calculator::schema::History *GetSizePrefixedHistory(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<calculator::schema::History>(buf);
}

inline History *GetMutableHistory(void *buf) {
  return flatbuffers::GetMutableRoot<History>(buf);
}

inline bool VerifyHistoryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<calculator::schema::History>(nullptr);
}

inline bool VerifySizePrefixedHistoryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<calculator::schema::History>(nullptr);
}

inline void FinishHistoryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<calculator::schema::History> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHistoryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<calculator::schema::History> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<calculator::schema::HistoryT> UnPackHistory(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<calculator::schema::HistoryT>(GetHistory(buf)->UnPack(res));
}

inline std::unique_ptr<calculator::schema::HistoryT> UnPackSizePrefixedHistory(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<calculator::schema::HistoryT>(GetSizePrefixedHistory(buf)->UnPack(res));
}

}  // namespace schema
}  // namespace calculator

#endif  // FLATBUFFERS_GENERATED_HISTORY_CALCULATOR_SCHEMA_H_
